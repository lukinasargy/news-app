{"version":3,"sources":["components/Posts/Post/Post.js","components/Posts/PostList.js","components/Home/Home.js","containers/App.js","serviceWorker.js","index.js","components/Home/Home.module.css","logo.svg","components/Posts/Post/Post.module.css"],"names":["Post","state","showContent","adsContent","adsData","rand","adContent","prevRand","dataLength","length","Math","floor","random","className","classes","ad","href","url","adImg","src","urlToImage","alt","adText","renderHTML","description","this","Post__active","props","date","author","title","img","text","content","link","Component","PostList","data","PostData","counter","style","width","map","postDetail","index","key","path","id","publishedAt","Home","exact","Home__nav","tileStyle","backgroundImage","backgroundPosition","backgroundSize","to","tile","tile__title","App","loadHandler","logo","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"6RAoDeA,E,2MA7CXC,MAAQ,CACJC,aAAa,EACbC,WAAYC,G,wEAIN,IAEFC,EAFC,OAICC,EAAY,SAACC,GACf,IAAMC,EAAa,EAAKP,MAAME,WAAWM,OAIzC,IADAJ,EAAOK,KAAKC,MAAMD,KAAKE,SAASJ,GACzBH,IAASE,GACZF,EAAOK,KAAKC,MAAMD,KAAKE,SAASJ,GAGpC,OACI,uBAAGK,UAAWC,IAAQC,GAAIC,KAAM,EAAKf,MAAME,WAAWE,GAAMY,KACxD,yBAAKJ,UAAWC,IAAQI,MAAOC,IAAK,EAAKlB,MAAME,WAAWE,GAAMe,WAAYC,IAAI,KAChF,uBAAGR,UAAWC,IAAQQ,QAASC,IAAW,EAAKtB,MAAME,WAAWE,GAAMmB,gBAIlF,OACY,yBAAKX,UAAS,UAAKC,IAAQd,KAAb,YAAqByB,KAAKxB,MAAMC,aAAeY,IAAQY,eACjE,2BAAID,KAAKE,MAAMC,MACf,2BAAIH,KAAKE,MAAME,QACf,wBAAIhB,UAAWC,IAAQgB,OAAQL,KAAKE,MAAMG,QACxCL,KAAKxB,MAAMC,aAAe,2BAAIuB,KAAKE,MAAMH,aAC3C,yBAAKL,IAAKM,KAAKE,MAAMP,WAChBP,UAAWC,IAAQiB,IAAKV,IAAI,KAChCf,IACD,uBAAGO,UAAWC,IAAQkB,MAAOT,IAAWE,KAAKE,MAAMM,UAClD3B,EAAUD,GACX,6BACA,uBAAGW,KAAMS,KAAKE,MAAMO,MAApB,a,GAvCLC,aC0EJC,E,2MAzEXnC,MAAO,CAEHoC,KAAOC,EACPC,QAAS,G,wEAgCT,OAEI,yBAAK1B,UAAU,WAAW2B,MALhB,CACVC,MAAO,SAKFhB,KAAKxB,MAAMoC,KAAKK,KAAI,SAACC,EAAYC,GAC9B,OACI,yBAAKC,IAAKnC,KAAKE,UAEX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOkC,KAAM,IAAIH,EAAWI,IACxB,kBAAC,EAAD,CACIF,IAAKD,EACLf,OAAQc,EAAWd,OACnBC,MAAOa,EAAWb,MAClBN,YAAamB,EAAWnB,YACxBJ,WAAYuB,EAAWvB,WACvBQ,KAAMe,EAAWK,YACjBf,QAASU,EAAWV,QAKpBC,KAAMS,EAAW1B,iB,GAzDlCkB,a,iBCoCRc,E,2MAnCXhD,MAAQ,CACJoC,KAAMC,G,wEAIN,OACI,kBAAC,IAAD,CAAOQ,KAAK,IAAII,OAAK,GACjB,yBAAKrC,UAAWC,IAAQmC,MACpB,2CACA,yBAAKpC,UAAWC,IAAQqC,WACnB1B,KAAKxB,MAAMoC,KAAKK,KAAI,SAACC,EAAYC,GAC9B,IAAMQ,EAAY,CACdC,gBAAgB,OAAD,OAASV,EAAWvB,WAApB,KACfkC,mBAAoB,UACpBC,eAAgB,SAGpB,OAEI,kBAAC,IAAD,CAAMC,GAAI,IAAMb,EAAWI,GAAIF,IAAK,OAASF,EAAWI,GAAIlC,UAAWC,IAAQ2C,KACzEjB,MAAOY,GAET,wBAAIvC,UAAWC,IAAQ4C,aAAcf,EAAWb,kB,GAvBjEK,a,iBC0CJwB,G,kNAtCX1D,MAAQ,CACJoC,KAAOC,G,EAEXsB,YAAc,WACT,EAAK3D,MAAMoC,KAAKK,KAAI,SAACC,EAAYC,GAC9B,GAAIA,GAAS,GACT,OAAS,kBAAC,IAAD,CAAMY,GAAI,IAAIb,EAAWI,GAAIF,IAAK,OAAOF,EAAWI,GAAIlC,UAAU,YAAY8B,EAAWb,W,wEAO1G,OAEQ,yBAAKjB,UAAU,OACX,yBAAKA,UAAU,cACX,yBAAKM,IAAK0C,IAAMxC,IAAI,GAAGR,UAAU,aACjC,kBAAC,IAAD,CAAM2C,GAAI,IAAK3C,UAAW,aAA1B,aAGJ,yBAAKA,UAAU,WACVY,KAAKxB,MAAMoC,KAAKK,KAAI,SAACC,EAAYC,GAC1B,OAAQ,kBAAC,IAAD,CAAMY,GAAI,IAAIb,EAAWI,GAAIF,IAAK,OAAOF,EAAWI,GAAIlC,UAAU,YAAY8B,EAAWb,WAG7G,kBAAC,EAAD,MAEA,kBAAC,EAAD,W,GA7BFK,cCGE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EACF,kBAAC,IAAD,KACI,kBAAC,EAAD,OAIRC,IAASC,OAAOF,EAAKG,SAASC,eAAe,SDqHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,u7XElInBC,EAAOC,QAAU,CAAC,KAAO,mBAAmB,UAAY,wBAAwB,KAAO,mBAAmB,UAAY,wBAAwB,YAAc,4B,wtECD5JD,EAAOC,QAAU,IAA0B,kC,+FCC3CD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,KAAO,mBAAmB,aAAe,2BAA2B,IAAM,kBAAkB,KAAO,mBAAmB,GAAK,iBAAiB,MAAQ,oBAAoB,OAAS,uB","file":"static/js/main.e981fef1.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n// import {Route, Switch} from 'react-router-dom';\r\nimport renderHTML from 'react-render-html';\r\nimport adsData from '../../../data/ads';\r\nimport classes from './Post.module.css';\r\n\r\nclass Post extends Component {\r\n    state = {\r\n        showContent: true,\r\n        adsContent: adsData\r\n\r\n    };\r\n\r\n    render() {\r\n        let content = null;\r\n        let rand;\r\n\r\n        const adContent = (prevRand) => {\r\n            const dataLength = this.state.adsContent.length;\r\n            // alert(dataLength);\r\n            // let prevRand = rand;\r\n            rand = Math.floor(Math.random()*dataLength);\r\n            while (rand === prevRand) {\r\n                rand = Math.floor(Math.random()*dataLength);\r\n            }\r\n\r\n            return  (\r\n                <a className={classes.ad} href={this.state.adsContent[rand].url}>\r\n                    <img className={classes.adImg} src={this.state.adsContent[rand].urlToImage} alt=\"\"/>\r\n                    <p className={classes.adText}>{renderHTML(this.state.adsContent[rand].description)}</p>\r\n                </a>\r\n            );\r\n        } ;\r\n        return (\r\n                    <div className={`${classes.Post} ${this.state.showContent && classes.Post__active}`} >\r\n                        <p>{this.props.date}</p>\r\n                        <p>{this.props.author}</p>\r\n                        <h1 className={classes.title}>{this.props.title}</h1>\r\n                        {!this.state.showContent && <p>{this.props.description}</p>}\r\n                        <img src={this.props.urlToImage}\r\n                             className={classes.img} alt=\"\"/>\r\n                        {adContent()}\r\n                        <p className={classes.text}>{renderHTML(this.props.content)}</p>\r\n                        {adContent(rand)}\r\n                        <br/>\r\n                        <a href={this.props.link}>Link</a>\r\n                    </div>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default Post;\r\n","import React, {Component} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\n// import { getNews } from '../../utils/fetchNews'\r\nimport PostData from '../../data/posts';\r\nimport Post from \"./Post/Post\";\r\n\r\nclass PostList extends Component {\r\n    state ={\r\n        // articles : [],\r\n        data : PostData,\r\n        counter: 0,\r\n        // refreshing: true\r\n    };\r\n\r\n    // clickPostHandler = (index) => {\r\n    //     let posts = [...this.state.data];\r\n    //     posts = posts.filter((item, ind) => ind === index);\r\n    //     this.setState({data: posts});\r\n    // };\r\n    // unClickPostHandler =() => {\r\n    //     this.setState({data : PostData});\r\n    // };\r\n    /*fetch NEWS API START*/\r\n    // fetchNews = () => {\r\n    // componentDidMount = () => {\r\n    //     this.fetchNews();\r\n    // };\r\n    //     getNews()\r\n    //         .then(data => {\r\n    //             this.setState({ data, refreshing: false })\r\n    //         })\r\n    //         .catch((err) => {this.setState({ refreshing: false });console.log(err)})\r\n    // };\r\n    // handleRefresh = () => {\r\n    //     this.setState({ refreshing: true }, () => this.fetchNews())\r\n    // };\r\n    /*fetch NEWS API END*/\r\n\r\n    render() {\r\n        const style = {\r\n            width: '100%'\r\n        };\r\n        return (\r\n            /*<Route path=\"/all\" exact>*/\r\n            <div className=\"PostList\" style={style}>\r\n                {this.state.data.map((postDetail, index) => {\r\n                    return (\r\n                        <div key={Math.random()}>\r\n                            {/*<Link to={\"/\"+postDetail.id} key={\"link\"+postDetail.id}>{postDetail.title}</Link>*/}\r\n                            <Switch  >\r\n                                <Route path={\"/\"+postDetail.id}  >\r\n                                    <Post\r\n                                        key={index}\r\n                                        author={postDetail.author}\r\n                                        title={postDetail.title}\r\n                                        description={postDetail.description}\r\n                                        urlToImage={postDetail.urlToImage}\r\n                                        date={postDetail.publishedAt}\r\n                                        content={postDetail.content}\r\n                                        // click={() => this.clickPostHandler(index)}\r\n                                        // unClick={() => this.unClickPostHandler()}\r\n                                        // refreshing={this.state.refreshing}\r\n                                        // onRefresh={this.handleRefresh}\r\n                                        link={postDetail.url}\r\n                                    />\r\n                                </Route>\r\n                            </Switch>\r\n                        </div>\r\n\r\n\r\n\r\n                        );\r\n                })}\r\n            </div>\r\n            // </Route>\r\n        );\r\n    };\r\n\r\n}\r\n\r\nexport default PostList;\r\n","import React, {Component} from 'react';\r\nimport {Route, Link} from 'react-router-dom';\r\n// import PostList from \"../Posts/PostList\";\r\nimport PostData from \"../../data/posts\";\r\nimport classes from './Home.module.css';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        data: PostData,\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Route path=\"/\" exact>\r\n                <div className={classes.Home}>\r\n                    <h1>Latest news</h1>\r\n                    <div className={classes.Home__nav}>\r\n                        {this.state.data.map((postDetail, index) => {\r\n                            const tileStyle = {\r\n                                backgroundImage: `url(${postDetail.urlToImage})`,\r\n                                backgroundPosition: '50% 50%',\r\n                                backgroundSize: 'cover'\r\n\r\n                            };\r\n                            return (\r\n\r\n                                <Link to={\"/\" + postDetail.id} key={\"link\" + postDetail.id} className={classes.tile}\r\n                                      style={tileStyle}>\r\n                                    {/*<img src={postDetail.urlToImage} alt=\"\" className={classes.tile__img}/>*/}\r\n                                    <h2 className={classes.tile__title}>{postDetail.title}</h2>\r\n                                </Link>\r\n\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n            </Route>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport PostList from \"../components/Posts/PostList\";\nimport Home from \"../components/Home/Home\";\nimport PostData from '../data/posts';\n// import TestInput from \"../components/TestInput/TestInput\";\nimport logo from '../logo.svg';\nimport '../App.css';\n\nclass App extends Component {\n    state = {\n        data : PostData,\n    };\n    loadHandler = () => {\n        {this.state.data.map((postDetail, index) => {\n            if (index >= 10) {\n                return ( <Link to={\"/\"+postDetail.id} key={\"link\"+postDetail.id} className=\"App-link\">{postDetail.title}</Link>)\n            }\n        })}\n    };\n    render() {\n        // const baseUrl = \"/1\"; // will be /hypercomp;\n\n        return (\n            // <Route path=\"/\" >\n                <div className=\"App\">\n                    <div className=\"App-header\">\n                        <img src={logo} alt=\"\" className=\"App-logo\"/>\n                        <Link to={\"/\"} className={\"App-title\"}>News App</Link>\n                    </div>\n                    {/*<TestInput/>*/}\n                    <div className=\"App-nav\">\n                        {this.state.data.map((postDetail, index) => {\n                                return  <Link to={\"/\"+postDetail.id} key={\"link\"+postDetail.id} className=\"App-link\">{postDetail.title}</Link>\n                        })}\n                    </div>\n                    <Home />\n                    {/*<Route path=\"/\" component={PostList}/>*/}\n                    <PostList />\n                </div>\n            // </Route>\n\n        );\n\n    };\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter}from 'react-router-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nconst app = (\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__xAGEm\",\"Home__nav\":\"Home_Home__nav__t34kt\",\"tile\":\"Home_tile__1XTbK\",\"tile__img\":\"Home_tile__img__vQLGi\",\"tile__title\":\"Home_tile__title__1ni9i\"};","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Post\":\"Post_Post__2-l89\",\"title\":\"Post_title__2XsUg\",\"Back\":\"Post_Back__26fRT\",\"Post__active\":\"Post_Post__active__3KSxX\",\"img\":\"Post_img__2EYdO\",\"text\":\"Post_text__1Ee0X\",\"ad\":\"Post_ad__1QOSq\",\"adImg\":\"Post_adImg__2XArn\",\"adText\":\"Post_adText__3i9Dw\"};"],"sourceRoot":""}